(dp1
S'output'
p2
S"<type 'exceptions.AttributeError'> 'Rows' object has no attribute 'lenght'"
p3
sS'layer'
p4
S'C:\\Users\\otakai\\Desktop\\web2py\\applications\\eadtools\\controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n# -------------------------------------------------------------------------\n# This is a sample controller\n# - index is the default action of any application\n# - user is required for authentication and authorization\n# - download is for downloading files uploaded in the db (does streaming)\n# -------------------------------------------------------------------------\n\n\ndef index():\n    """\n    example action using the internationalization operator T and flash\n    rendered by views/default/index.html or views/generic.html\n\n    if you need a simple wiki simply replace the two lines below with:\n    return auth.wiki()\n    """\n    response.flash = T("Hello World")\n    return dict(message=T(\'Welcome to web2py!\'))\n\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/bulk_register\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    also notice there is http://..../[app]/appadmin/manage/auth to allow administrator to manage users\n    """\n    return dict(form=auth())\n\n\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\n\n@auth.requires_login()\ndef nova_disciplina():\n    is_professor = db ((db.auth_membership.user_id == auth.user.id) \n        & (db.auth_membership.group_id == db.auth_group.id) \n        & (db.auth_group.role == \'Professor\')).select()\n    if is_professor.lenght() > 0:\n        form = SQLFORM(Disciplina)\n        if form.process().accepted:\n            session.flash = \'Formul\xc3\xa1rio aceito!\'\n        elif form.errors:\n            response.flash = \'Erros no formul\xc3\xa1rio!\'\n        else:\n            response.flash = \'Preencha o formul\xc3\xa1rio!\'\n        return dict(form=form)\n    else: response.flash = \'Voc\xc3\xaa n\xc3\xa3o tem autoriza\xc3\xa7\xc3\xa3o para criar disciplinas!\'\n\n\n@auth.requires_login()\ndef planosdeentrega():\n    session.config or dict(color = \'blck\', language=\'Portuguese\')\n    nome_disciplina = db(Disciplina.id == request.args(0)).select().first().nome\n    grid = SQLFORM.grid(PlanoDeEntrega.disciplina_id == request.args(0),\n        fields = [PlanoDeEntrega.id, PlanoDeEntrega.tipo, PlanoDeEntrega.descricao, PlanoDeEntrega.datainicial, PlanoDeEntrega.datafinal],\n        user_signature=False,\n        csv = False,\n        details = False,\n        maxtextlength = 40, \n        deletable = False,\n        editable = False,\n        create=False)\n    #planos = db(PlanoDeEntrega.disciplina_id == request.args(0)).select()\n    return dict(nome_disciplina = nome_disciplina, grid = grid)\n\n@auth.requires_login()\ndef disciplinas():\n    session.config or dict(color = \'blck\', language=\'Portuguese\')\n    grid = SQLFORM.grid(db(Disciplina.created_by == Usuario.id), \n        fields = [Disciplina.id, Usuario.first_name, Disciplina.nome],\n        links = [lambda row: A(\'Entregas\' , _href = URL(\'planosdeentrega\', args = [row.disciplina.id]))],\n        csv = False,\n        details = False,\n        maxtextlength = 40, \n        deletable = False,\n        editable = False,\n        create=False)\n    return dict(grid=grid)\n\nresponse._vars=response._caller(nova_disciplina)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "C:\\Users\\otakai\\Desktop\\web2py\\gluon\\restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "C:\\Users\\otakai\\Desktop\\web2py\\applications\\eadtools\\controllers/default.py", line 109, in <module>\n  File "C:\\Users\\otakai\\Desktop\\web2py\\gluon\\globals.py", line 417, in <lambda>\n    self._caller = lambda f: f()\n  File "C:\\Users\\otakai\\Desktop\\web2py\\gluon\\tools.py", line 4241, in f\n    return action(*a, **b)\n  File "C:\\Users\\otakai\\Desktop\\web2py\\applications\\eadtools\\controllers/default.py", line 67, in nova_disciplina\n    if is_professor.lenght() > 0:\nAttributeError: \'Rows\' object has no attribute \'lenght\'\n'
p11
s.